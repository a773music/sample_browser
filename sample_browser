#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# original ncurses browser: https://gist.github.com/rygwdn/394885
"""Yet another curses-based directory tree browser, in Python.
I thought I could use something like this for filename entry, kind of
like the old 4DOS 'select' command --- cd $(cursoutline.py).  So you
navigate and hit Enter, and it exits and spits out the file you're on.
Originally from: http://lists.canonical.org/pipermail/kragen-hacks/2005-December/000424.html
Originally by: Kragen Sitaker
"""
# There are several general approaches to the drawing-an-outline
# problem.  This program supports the following operations:
# - move cursor to previous item (in preorder traversal)
# - move cursor to next item (likewise)
# - hide descendants
# - reveal children
# And because it runs over the filesystem, it must be at least somewhat lazy
# about expanding children.
# And it doesn't really bother to worry about someone else changing the outline
# behind its back.
# So the strategy is to store our current linear position in the
# inorder traversal, and defer operations on the current node until the next
# time we're traversing.
import commands, time
import curses.wrapper, time, random, cgitb, os, sys

audio_extensions = ['flac','wav','mp3','aif','aiff']

rc_file = os.path.expanduser('~/.sample_browser_rc')
play_command = 'mplayer -really-quiet'
edit_command = ''
marked = []

browse_dir = '.'

cgitb.enable(format="text")
ESC = 27

playing = ''

args = sys.argv[1:]
if '-?' in args or '-h' in args or '--help' in args:
    print """help:
    navigate with arrow keys
    to play file press space or return
    arrow right/left shows/hides dir content
    to edit file , press 'e'
    to toggle mark on file , press 'm'
    to unmark all, press 'u'
    to exit, press 'q' or escape 

    marked files printed to stdout on exit
    config file in .sample_browser_rc (created if not present)"""
    sys.exit()
    
if len(args) and os.path.isdir(args[0]):
    browse_dir = args[0]


def debug(string):
    os.system('echo "' + string + '" >> /tmp/sample_browser_debug.txt')


def jack_is_running():
    jack='ps aux | grep jackd | grep -v grep'
    result = os.popen(jack, 'r').readlines()
    if len(result) == 0:
        return False
    else:
        return True

    
def make_list_unique(in_list):
    return list(set(in_list))

def get_ext(file_path):
    base, ext = os.path.splitext(file_path)
    ext = ext.strip('.').lower()
    return ext


def external_program_exists(command):
    ok = False
    path = os.environ["PATH"]
    if os.name in ["nt", "os2"]:
        short = [command + "." + ext for ext in ["exe","com","bat"]]
    else:
        short = [command]

    for scmd in short:
        for dir in path.split(os.pathsep):
            fcmd = os.path.abspath(os.path.join(dir,scmd))
            if os.path.isfile(fcmd):
                ok = True
    return ok

def string2file(string,filename):
    f = open(filename,'w')
    f.write(string)
    f.close()
        
def create_default_rc_file():
    rc = []
    edit_command_candidates = ['mhwaveedit','audacity']
    for candidate in edit_command_candidates:
        if external_program_exists(candidate):
            rc.append("edit_command = '" + candidate + "'")
            break
    rc.append("browse_dir = '.'")
    rc = '\n'.join(rc) + '\n'
    string2file(rc,rc_file)
    
def is_playing():
    play_process = play_command.split(' ')[0]
    is_playing = False
    status, output = commands.getstatusoutput('ps aux')
    for line in output.split('\n'):
        if line.find(play_process) != -1:
            is_playing = True
            break
    return is_playing

def play(file_path):
    global playing, play_command
    if not os.path.isfile(file_path):
        return
    if playing == file_path and is_playing():
        stop()
        return
    elif playing != '':
        stop()
    local_play = play_command
    if jack_is_running():
        local_play = local_play + ' -af channels=2 -ao jack '
    os.system(local_play + ' "' + file_path + '" > /dev/null 2>&1 &')
    playing = file_path

def stop():
    global playing
    process_name = play_command.split(' ')[0]
    os.system('killall ' + process_name + ' >/dev/null 2>&1')
    playing = ''

def edit(file_path):
    if not os.path.isfile(file_path):
        return
    os.system(edit_command + ' "' + file_path + '" >/dev/null 2>&1')

def pad(data, width):
    # XXX this won't work with UTF-8
    return data + ' ' * (width - len(data))

class File:
    def __init__(self, name):
        self.name = name
        
    def render(self, depth, width):
        return pad('%s%s %s' % (' ' * 4 * depth, self.icon(),
                                os.path.basename(self.name)), width)
    def icon(self):
        return '   '
    
    def traverse(self):
        yield self, 0
        
    def expand(self):
        pass
    
    def collapse(self):
        pass

class Dir(File):
    def __init__(self, name):
        File.__init__(self, name)
        try: self.kidnames = sorted(os.listdir(name))
        except: self.kidnames = None  # probably permission denied
        self.kids = None
        self.expanded = False
        
    def children(self):
        if self.kidnames is None:
            return []
        if self.kids is None:
            self.kids = []
            for kid in self.kidnames:
                kid = factory(os.path.join(self.name, kid))
                name = kid.name
                if os.path.isfile(name):
                    if get_ext(name) in audio_extensions:
                        self.kids.append(kid)
                else:
                    self.kids.append(kid)
        return self.kids
    
    def icon(self):
        if self.expanded:
            return '[-]'
        elif self.kidnames is None:
            return '[?]'
        elif self.children():
            return '[+]'
        else: return '[ ]'

    def expand(self):
        self.expanded = True

    def collapse(self):
        self.expanded = False
        
    def traverse(self):
        yield self, 0
        if not self.expanded:
            return
        for child in self.children():
            for kid, depth in child.traverse():
                yield kid, depth + 1
    
def factory(name):
    if os.path.isdir(name):
        return Dir(name)
    else:
        return File(name)


def toggle_marked(string):
    if not string in marked:
        marked.append(string)
    else:
        marked.remove(string)
        
def unmark_all():
    global marked
    marked = []
        
def main(stdscr):
    global browse_dir
    cargo_cult_routine(stdscr)
    stdscr.nodelay(0)
    mydir = factory(browse_dir)
    mydir.expand()
    curidx = 3
    pending_action = None
    pending_play_toggle = False
    pending_edit = False
    pending_mark = False
    pending_unmark = False
    extra_refresh_hack = False

    
    while 1:
        extra_refresh_hack = False
        stdscr.clear()
        curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_BLUE)
        curses.init_pair(2, curses.COLOR_WHITE, curses.COLOR_RED)
        line = 0
        offset = max(0, curidx - curses.LINES + 3)
        for data, depth in mydir.traverse():
            if line == curidx:
                if data.name in marked:
                    stdscr.attrset(curses.color_pair(2) | curses.A_BOLD)
                else:
                    stdscr.attrset(curses.color_pair(1) | curses.A_BOLD)
                if pending_action:
                    getattr(data, pending_action)()
                    pending_action = None
                elif pending_play_toggle:
                    play(data.name)
                    pending_play_toggle = False
                elif pending_edit:
                    stop()
                    edit(data.name)
                    pending_edit = False
                elif pending_mark:
                    toggle_marked(data.name)
                    if data.name in marked:
                        stdscr.attrset(curses.color_pair(2) | curses.A_BOLD)
                    else:
                        stdscr.attrset(curses.color_pair(1)| curses.A_BOLD)
                    stdscr.refresh()
                    pending_mark = False
                elif pending_unmark:
                    unmark_all()
                    stdscr.attrset(curses.color_pair(1)| curses.A_BOLD)
                    stdscr.refresh()
                    pending_unmark = False
                    extra_refresh_hack = True
            else:
                if data.name in marked:
                    stdscr.attrset(curses.color_pair(2))
                else:
                    stdscr.attrset(curses.color_pair(0))
            if 0 <= line - offset < curses.LINES - 1:
                stdscr.addstr(line - offset, 0,
                              data.render(depth, curses.COLS))
            line += 1
        if extra_refresh_hack:
            continue
        stdscr.refresh()
        ch = stdscr.getch()
        if ch == curses.KEY_UP:
            curidx -= 1
        elif ch == curses.KEY_DOWN:
            curidx += 1
        elif ch == curses.KEY_PPAGE:
            curidx -= curses.LINES
            if curidx < 0:
                curidx = 0
        elif ch == curses.KEY_NPAGE:
            curidx += curses.LINES
            if curidx >= line:
                curidx = line - 1
        elif ch == curses.KEY_RIGHT:
            pending_action = 'expand'
        elif ch == curses.KEY_LEFT:
            pending_action = 'collapse'
        elif ch == ESC or ch == ord('q'):
            stop()
            return
        elif ch == ord(' ') or ch == ord('\n'):
            pending_play_toggle = True
        # actions
        elif ch == ord('e'):
            pending_edit = True
            stop()
        elif ch == ord('m'):
            pending_mark = True
        elif ch == ord('u'):
            pending_unmark = True
        curidx %= line

def cargo_cult_routine(win):
    win.clear()
    win.refresh()
    curses.nl()
    curses.noecho()
    win.timeout(0)

def open_tty():
    saved_stdin = os.dup(0)
    saved_stdout = os.dup(1)
    os.close(0)
    os.close(1)
    stdin = os.open('/dev/tty', os.O_RDONLY)
    stdout = os.open('/dev/tty', os.O_RDWR)
    return saved_stdin, saved_stdout

def restore_stdio((saved_stdin, saved_stdout)):
    os.close(0)
    os.close(1)
    os.dup(saved_stdin)
    os.dup(saved_stdout)


if not os.path.isfile(rc_file):
    create_default_rc_file()
execfile(rc_file)
browse_dir = os.path.expanduser(browse_dir)
if len(args) and os.path.isdir(args[0]):
    browse_dir = args[0]



missing_commands = []
for one in [play_command, edit_command]:
    one = one.split(' ')[0]
    if not len(one) or not external_program_exists(one):
        missing_commands.append(one)
if missing_commands:
    for one in missing_commands:
        print 'missing command: ' + one
    print 'exiting...'
    sys.exit()

if __name__ == '__main__':
    if len(sys.argv) > 1:
        start = sys.argv[1]
    saved_fds = open_tty()
    try:
        curses.wrapper(main)
    finally:
        restore_stdio(saved_fds)
    if len(marked):
        marked = sorted(make_list_unique(marked))
        print '\n'.join(marked)
